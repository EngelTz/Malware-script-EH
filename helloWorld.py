import os
import sys
from time import sleep
from subprocess import call

def main():
    while(True):
        welcome = "\n\t***HELLO, S[crip]TRANGER!***\n"
        if os.path.exists("README.md"):
            readmefile = open("README.md", "r")
            readme = readmefile.read()
            readmefile.close()
        else:
            readme = "For more information about this script visit https://github.com/EngelTz/Malware-script-EH"

        os.system('cls' if os.name == 'nt' else 'clear')
        print welcome
        print readme
        print "--------------------------------------------------------------\n"
        print "In order to execute the attack, it is required to do the next actions:\n\
    1) Identify vulnerable target(s)\n\
    2) Find information and vulnerabilities from the target(s)\n\
    3) Exploit vulnerabilities\n\
    4) Do everything automatically\n\
    5) Exit\n\
\nSelect an option: ",
        option = input()
        if option < 1 or option > 5:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if   option == 1: findTargets_Menu()
            elif option == 2: getVulnerabilities_Menu()
            elif option == 3: exploitVulnerabilities_Menu()
            elif option == 4: automaticExploit_Menu()
            return

def findTargets_Menu():
    while(True):
        os.system('cls' if os.name == 'nt' else 'clear')
        print "\n\t***IDENTIFY VULNERABLE TARGET(S)***\n"
        print "You can identify a vulnerable target according to:\n\
    1) A specific IP address (i.e. 192.168.12.34)\n\
    2) A network range (i.e. 192.168.12.0/24)\n\
    3) A file with specifics IP addresses (i.e. 'targets.txt')\n\
    4) Back\n"

        print "So... what do you decide? ",
        option = input()
        if option < 1 or option > 4:
            for i in range(2,0,-1):
                sys.stdout.write ("\rWrong decision, man u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if option == 1:
                print "\nWho is your target? (A valid IPv4 address): ",
                target = raw_input()
                if len(target) < 7 or len(target) > 15:
                    print "Wrong IPv4 address"
                    sleep(2)
                else:
                    findTargets(target)
                    break
            elif option == 2:
                print "\nWho are your targets? (A valid IPv4 address range): ",
                target = raw_input()
                if len(target) < 9 or len(target) > 18:
                    print "Wrong IPv4 address range"
                    sleep(2)
                else:
                    findTargets(target)
                    break
            elif option == 3:
                print "\nWhere are your targets? (A valid .txt file): ",
                target = raw_input()
                if os.path.exists(target):
                    textfile = open(target, "r")
                    targets = textfile.readlines()
                    textfile.close()
                    for target in targets:
                        target = target.replace('\n','')
                        findTargets(target)
                    break
                else:
                    print "I did not found that file. Sure is wrote correctly?"
                    sleep(3)
            elif option == 4:
                main()
                break


def findTargets(target):
    if target is not 0:
        print "\n\n ----- TARGET", target, "-----"
        print "\nMASSCAN"
        progressBar(0,1)
        print
        os.system('masscan ' + target + ' -p80 | grep -o "[1-255].*" > masscanResult.txt')
        if os.path.exists("masscanResult.txt"):
            print "Open ports found. The vulnerable IP addresses were saved in 'masscanResult.txt'."
        else:
            print "\nMasscan did not found any port 80 open."

        print "\nNMAP"
        progressBar(1,1)
        print
        os.system('nmap ' + target + ' | grep -o "*open*" > nmapResults.txt')
        if os.path.exists("nmapResults.txt"):
            print "\nOpen ports found. The vulnerable IP addresses were saved in 'nmapResults.txt'."
        else:
            print "\nnmap did not found any port open."


def getVulnerabilities_Menu():
    for i in range(0,100):
        progressBar(i,99)
        sleep(0.05)


def exploitVulnerabilities_Menu():
    return 0


def automaticExploit_Menu():
    return 0


#From Aravind Voggu
def progressBar(value, endvalue):
    size = os.popen('stty size', 'r').read().split()
    bar_length = int(size[1]) - 6
    percent = float(value) / endvalue
    arrow = '|' * int(round(percent * bar_length))
    spaces = '-' * (bar_length - len(arrow))

    sys.stdout.write("\r[{0}]{1}%".format(arrow + spaces, int(round(percent * 100))))
    sys.stdout.flush()

if __name__ == '__main__':
    main()
