import os
import sys
from time import sleep
from subprocess import call

def main():
    while(True):
        welcome = "Hello, Scriptranger!\n"
        if os.path.exists("README.md"):
            readmefile = open("README.md", "r")
            readme = readmefile.read()
            readmefile.close()
        else:
            readme = "For more information about this script visit https://github.com/EngelTz/Malware-script-EH"

        os.system('cls' if os.name == 'nt' else 'clear')
        print welcome
        print readme
        print "In order to execute the attack, it is required to do the next actions:\n\
    1) Identify vulnerable targets\n\
    2) Find information and vulnerabilities from the target(s)\n\
    3) Exploit vulnerabilities\n\
    4) Do everything automatically\n\
    5) Exit\n\
Select an option: ",
        option = input()
        if option < 1 or option > 5:
            for i in range(3,0,-1):
                sys.stdout.write ("\rWrong decision, men u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            if   option == 1: findTargets()
            elif option == 2: getVulnerabilities()
            elif option == 3: exploitVulnerabilities()
            elif option == 4: automaticExploit()
            return

def findTargets():
    while(True):
        print "Identify vulnerable target(s)\n"
        print "You can identify a vulnerable target according to:\n\
    1) A specific IP address (i.e. 192.168.12.34)\n\
    2) A network range (i.e. 192.168.12.0/24)\n\
    3) A file with specifics IP addresses (i.e. 'targets.txt')"

        print "So... what do you decide? ",
        option = input()
        if option < 1 or option > 3:
            for i in range(3,0,-1):
                sys.stdout.write ("\rWrong decision, men u_u... wait ")
                sys.stdout.write (str(i))
                sys.stdout.write (" seconds")
                sys.stdout.flush()
                sleep(1)
        else:
            for i in range(0,100):
                progressBar(i,99)
                sleep(0.1)
            return


def getVulnerabilities():
    return 0


def exploitVulnerabilities():
    return 0


def automaticExploit():
    return 0


#From Aravind Voggu
def progressBar(value, endvalue):
    size = os.popen('stty size', 'r').read().split()
    bar_length = int(size[1]) - 6
    percent = float(value) / endvalue
    arrow = '-' * int(round(percent * bar_length)-1) + '>'
    spaces = ' ' * (bar_length - len(arrow))

    sys.stdout.write("\r[{0}]{1}%".format(arrow + spaces, int(round(percent * 100))))
    sys.stdout.flush()

if __name__ == '__main__':
    main()
